/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jri.h"

/* Header for class java/io/InputStream */

#ifndef _java_io_InputStream_H_
#define _java_io_InputStream_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct java_lang_Class;

/*******************************************************************************
 * Class java/io/InputStream
 ******************************************************************************/

typedef struct java_io_InputStream java_io_InputStream;

#define classname_java_io_InputStream	"java/io/InputStream"

#define class_java_io_InputStream(env) \
	((struct java_lang_Class*)JRI_FindClass(env, classname_java_io_InputStream))

/*******************************************************************************
 * Public Methods
 ******************************************************************************/

#ifdef DEBUG

/*** public read ()I ***/
extern JRI_PUBLIC_API(jint)
java_io_InputStream_read(JRIEnv* env, struct java_io_InputStream* self);

/*** public read ([B)I ***/
extern JRI_PUBLIC_API(jint)
java_io_InputStream_read_1(JRIEnv* env, struct java_io_InputStream* self, jbyteArray a);

/*** public read ([BII)I ***/
extern JRI_PUBLIC_API(jint)
java_io_InputStream_read_2(JRIEnv* env, struct java_io_InputStream* self, jbyteArray a, jint b, jint c);

/*** public skip (J)J ***/
extern JRI_PUBLIC_API(jlong)
java_io_InputStream_skip(JRIEnv* env, struct java_io_InputStream* self, jlong a);

/*** public available ()I ***/
extern JRI_PUBLIC_API(jint)
java_io_InputStream_available(JRIEnv* env, struct java_io_InputStream* self);

/*** public close ()V ***/
extern JRI_PUBLIC_API(void)
java_io_InputStream_close(JRIEnv* env, struct java_io_InputStream* self);

/*** public mark (I)V ***/
extern JRI_PUBLIC_API(void)
java_io_InputStream_mark(JRIEnv* env, struct java_io_InputStream* self, jint a);

/*** public reset ()V ***/
extern JRI_PUBLIC_API(void)
java_io_InputStream_reset(JRIEnv* env, struct java_io_InputStream* self);

/*** public markSupported ()Z ***/
extern JRI_PUBLIC_API(jbool)
java_io_InputStream_markSupported(JRIEnv* env, struct java_io_InputStream* self);

/*** public <init> ()V ***/
extern JRI_PUBLIC_API(struct java_io_InputStream*)
java_io_InputStream_new(JRIEnv* env, struct java_lang_Class* clazz);

#else /* !DEBUG */

/*** public read ()I ***/
#define java_io_InputStream_read(env, obj) \
	((jint)JRI_CallMethodInt(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_read))

/*** public read ([B)I ***/
#define java_io_InputStream_read_1(env, obj, a) \
	((jint)JRI_CallMethodInt(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_read_1, a))

/*** public read ([BII)I ***/
#define java_io_InputStream_read_2(env, obj, a, b, c) \
	((jint)JRI_CallMethodInt(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_read_2, a, b, c))

/*** public skip (J)J ***/
#define java_io_InputStream_skip(env, obj, a) \
	((jlong)JRI_CallMethodLong(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_skip, a))

/*** public available ()I ***/
#define java_io_InputStream_available(env, obj) \
	((jint)JRI_CallMethodInt(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_available))

/*** public close ()V ***/
#define java_io_InputStream_close(env, obj) \
	((void)JRI_CallMethod(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_close))

/*** public mark (I)V ***/
#define java_io_InputStream_mark(env, obj, a) \
	((void)JRI_CallMethod(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_mark, a))

/*** public reset ()V ***/
#define java_io_InputStream_reset(env, obj) \
	((void)JRI_CallMethod(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_reset))

/*** public markSupported ()Z ***/
#define java_io_InputStream_markSupported(env, obj) \
	((jbool)JRI_CallMethodBoolean(env)(env, JRI_CallMethod_op, obj, methodID_java_io_InputStream_markSupported))

/*** public <init> ()V ***/
#define java_io_InputStream_new(env, clazz)	\
	((struct java_io_InputStream*)JRI_NewObject(env)(env, JRI_NewObject_op, clazz, methodID_java_io_InputStream_new))

#endif /* !DEBUG*/

/*** public read ()I ***/
extern JRIMethodID FAR methodID_java_io_InputStream_read;
#define name_java_io_InputStream_read	"read"
#define sig_java_io_InputStream_read 	"()I"
#define use_java_io_InputStream_read(env, clazz)	\
	(methodID_java_io_InputStream_read =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_read,	\
			sig_java_io_InputStream_read))
#define unuse_java_io_InputStream_read(env, clazz)	\
	(methodID_java_io_InputStream_read = JRIUninitialized)

/*** public read ([B)I ***/
extern JRIMethodID FAR methodID_java_io_InputStream_read_1;
#define name_java_io_InputStream_read_1	"read"
#define sig_java_io_InputStream_read_1 	"([B)I"
#define use_java_io_InputStream_read_1(env, clazz)	\
	(methodID_java_io_InputStream_read_1 =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_read_1,	\
			sig_java_io_InputStream_read_1))
#define unuse_java_io_InputStream_read_1(env, clazz)	\
	(methodID_java_io_InputStream_read_1 = JRIUninitialized)

/*** public read ([BII)I ***/
extern JRIMethodID FAR methodID_java_io_InputStream_read_2;
#define name_java_io_InputStream_read_2	"read"
#define sig_java_io_InputStream_read_2 	"([BII)I"
#define use_java_io_InputStream_read_2(env, clazz)	\
	(methodID_java_io_InputStream_read_2 =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_read_2,	\
			sig_java_io_InputStream_read_2))
#define unuse_java_io_InputStream_read_2(env, clazz)	\
	(methodID_java_io_InputStream_read_2 = JRIUninitialized)

/*** public skip (J)J ***/
extern JRIMethodID FAR methodID_java_io_InputStream_skip;
#define name_java_io_InputStream_skip	"skip"
#define sig_java_io_InputStream_skip 	"(J)J"
#define use_java_io_InputStream_skip(env, clazz)	\
	(methodID_java_io_InputStream_skip =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_skip,	\
			sig_java_io_InputStream_skip))
#define unuse_java_io_InputStream_skip(env, clazz)	\
	(methodID_java_io_InputStream_skip = JRIUninitialized)

/*** public available ()I ***/
extern JRIMethodID FAR methodID_java_io_InputStream_available;
#define name_java_io_InputStream_available	"available"
#define sig_java_io_InputStream_available 	"()I"
#define use_java_io_InputStream_available(env, clazz)	\
	(methodID_java_io_InputStream_available =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_available,	\
			sig_java_io_InputStream_available))
#define unuse_java_io_InputStream_available(env, clazz)	\
	(methodID_java_io_InputStream_available = JRIUninitialized)

/*** public close ()V ***/
extern JRIMethodID FAR methodID_java_io_InputStream_close;
#define name_java_io_InputStream_close	"close"
#define sig_java_io_InputStream_close 	"()V"
#define use_java_io_InputStream_close(env, clazz)	\
	(methodID_java_io_InputStream_close =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_close,	\
			sig_java_io_InputStream_close))
#define unuse_java_io_InputStream_close(env, clazz)	\
	(methodID_java_io_InputStream_close = JRIUninitialized)

/*** public mark (I)V ***/
extern JRIMethodID FAR methodID_java_io_InputStream_mark;
#define name_java_io_InputStream_mark	"mark"
#define sig_java_io_InputStream_mark 	"(I)V"
#define use_java_io_InputStream_mark(env, clazz)	\
	(methodID_java_io_InputStream_mark =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_mark,	\
			sig_java_io_InputStream_mark))
#define unuse_java_io_InputStream_mark(env, clazz)	\
	(methodID_java_io_InputStream_mark = JRIUninitialized)

/*** public reset ()V ***/
extern JRIMethodID FAR methodID_java_io_InputStream_reset;
#define name_java_io_InputStream_reset	"reset"
#define sig_java_io_InputStream_reset 	"()V"
#define use_java_io_InputStream_reset(env, clazz)	\
	(methodID_java_io_InputStream_reset =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_reset,	\
			sig_java_io_InputStream_reset))
#define unuse_java_io_InputStream_reset(env, clazz)	\
	(methodID_java_io_InputStream_reset = JRIUninitialized)

/*** public markSupported ()Z ***/
extern JRIMethodID FAR methodID_java_io_InputStream_markSupported;
#define name_java_io_InputStream_markSupported	"markSupported"
#define sig_java_io_InputStream_markSupported 	"()Z"
#define use_java_io_InputStream_markSupported(env, clazz)	\
	(methodID_java_io_InputStream_markSupported =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_markSupported,	\
			sig_java_io_InputStream_markSupported))
#define unuse_java_io_InputStream_markSupported(env, clazz)	\
	(methodID_java_io_InputStream_markSupported = JRIUninitialized)

/*** public <init> ()V ***/
extern JRIMethodID FAR methodID_java_io_InputStream_new;
#define name_java_io_InputStream_new	"<init>"
#define sig_java_io_InputStream_new 	"()V"
#define use_java_io_InputStream_new(env, clazz)	\
	(methodID_java_io_InputStream_new =	\
		JRI_GetMethodID(env, clazz,	\
			name_java_io_InputStream_new,	\
			sig_java_io_InputStream_new))
#define unuse_java_io_InputStream_new(env, clazz)	\
	(methodID_java_io_InputStream_new = JRIUninitialized)

/*******************************************************************************
 * IMPLEMENTATION SECTION: 
 * Define the IMPLEMENT_java_io_InputStream symbol 
 * if you intend to implement the native methods of this class. This 
 * symbol makes the private and protected methods available. You should 
 * also call the register_java_io_InputStream routine 
 * to make your native methods available.
 ******************************************************************************/

extern JRI_PUBLIC_API(struct java_lang_Class*)
use_java_io_InputStream(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unuse_java_io_InputStream(JRIEnv* env);

extern JRI_PUBLIC_API(struct java_lang_Class*)
register_java_io_InputStream(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unregister_java_io_InputStream(JRIEnv* env);

#ifdef IMPLEMENT_java_io_InputStream

#endif /* IMPLEMENT_java_io_InputStream */

#ifdef __cplusplus
} /* extern "C" */

/*******************************************************************************
 * C++ Definitions
 ******************************************************************************/

#include "java_lang_Object.h"

struct java_io_InputStream : public java_lang_Object {

	static struct java_lang_Class* _use(JRIEnv* env) {
		return use_java_io_InputStream(env);
	}

	static void _unuse(JRIEnv* env) {
		unuse_java_io_InputStream(env);
	}

	static struct java_lang_Class* _register(JRIEnv* env) {
		return register_java_io_InputStream(env);
	}

	static void _unregister(JRIEnv* env) {
		unregister_java_io_InputStream(env);
	}

	static struct java_lang_Class* _class(JRIEnv* env) {
		return class_java_io_InputStream(env);
	}

	/* Public Methods */
	/*** public read ()I ***/
	jint read(JRIEnv* env) {
		return java_io_InputStream_read(env, this);
	}

	/*** public read ([B)I ***/
	jint read(JRIEnv* env, jbyteArray a) {
		return java_io_InputStream_read_1(env, this, a);
	}

	/*** public read ([BII)I ***/
	jint read(JRIEnv* env, jbyteArray a, jint b, jint c) {
		return java_io_InputStream_read_2(env, this, a, b, c);
	}

	/*** public skip (J)J ***/
	jlong skip(JRIEnv* env, jlong a) {
		return java_io_InputStream_skip(env, this, a);
	}

	/*** public available ()I ***/
	jint available(JRIEnv* env) {
		return java_io_InputStream_available(env, this);
	}

	/*** public close ()V ***/
	void close(JRIEnv* env) {
		java_io_InputStream_close(env, this);
	}

	/*** public mark (I)V ***/
	void mark(JRIEnv* env, jint a) {
		java_io_InputStream_mark(env, this, a);
	}

	/*** public reset ()V ***/
	void reset(JRIEnv* env) {
		java_io_InputStream_reset(env, this);
	}

	/*** public markSupported ()Z ***/
	jbool markSupported(JRIEnv* env) {
		return java_io_InputStream_markSupported(env, this);
	}

	/*** public <init> ()V ***/
	static java_io_InputStream* _new(JRIEnv* env, struct java_lang_Class* clazz) {
		return java_io_InputStream_new(env, clazz);
	}

#ifdef IMPLEMENT_java_io_InputStream

#endif /* IMPLEMENT_java_io_InputStream */
};

#endif /* __cplusplus */

#endif /* Class java/io/InputStream */
